import logging
import os
from logging.handlers import TimedRotatingFileHandler

from celery.signals import after_setup_logger, after_setup_task_logger
from flask_appbuilder.security.manager import AUTH_DB, AUTH_LDAP
from systemd.journal import JournaldLogHandler
from superset.utils.logging_configurator import DefaultLoggingConfigurator


SECRET_KEY = '<%= @secret_key %>'
DEBUG = False

APP_NAME = "UBIS"
APP_ICON = "/static/assets/images/logo.png"
#APP_ICON_WIDTH = 126

CURRENT_DIR = os.path.abspath(os.path.dirname(__file__))
UPLOAD_FOLDER = CURRENT_DIR + '/app/static/uploads/'
IMG_UPLOAD_FOLDER = CURRENT_DIR + '/app/static/uploads/'

SQLALCHEMY_DATABASE_URI = 'postgresql://<%= @superset['db_user'] %>:<%= @superset['db_pass'] %>@<%= @superset['db_host'] %>/<%= @superset['db_name'] %>'
ROW_LIMIT = <%= @row_limit %>

<% if @feature_flags -%>
FEATURE_FLAGS ={
<% @feature_flags.each do | feature, toggle | -%>
    "<%= feature %>": <% if toggle -%>True<% else -%>False<% end -%>,
<% end -%>
}
<% else -%>
# no feature flag configured
<% end -%>

ENABLE_TIME_ROTATE = True

SESSION_COOKIE_SAMESITE = None

CACHE_CONFIG = {
    'CACHE_TYPE': 'redis',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 24, # 1 day default (in secs)
    'CACHE_KEY_PREFIX': 'superset_results',
    'CACHE_REDIS_URL': 'redis://localhost:6379/0',
}

THUMBNAIL_CACHE_CONFIG = {
    'CACHE_TYPE': 'redis',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 24, # 1 day default (in secs)
    'CACHE_KEY_PREFIX': 'thumbnail_',
    'CACHE_NO_NULL_WARNING': True,
    'CACHE_REDIS_URL': 'redis://localhost:6379/0'
}
THUMBNAIL_SELENIUM_USER = "<%= @admin_user %>"

class CeleryConfig(object):
    BROKER_URL = 'redis://localhost:6379/0'
    CELERY_IMPORTS = (
        'superset.sql_lab',
        'superset.tasks',
        'superset.tasks.thumbnails'
    )
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
    CELERYD_LOG_LEVEL = 'DEBUG'
    CELERYD_PREFETCH_MULTIPLIER = 10
    CELERY_ACKS_LATE = True

CELERY_CONFIG = CeleryConfig

WEBDRIVER_TYPE = "chrome"
WEBDRIVER_BASEURL = "http://localhost:8080"
WEBDRIVER_OPTION_ARGS = [
    "--force-device-scale-factor=2.0",
    "--high-dpi-support=2.0",
    "--headless",
    "--disable-gpu",
    "--disable-dev-shm-usage",
    "--no-sandbox",
    "--disable-setuid-sandbox",
    "--disable-extensions",
]

AUTH_USER_REGISTRATION = True

<% if @ldap_enabled -%>
AUTH_TYPE = AUTH_LDAP

AUTH_LDAP_SERVER = "ldaps://<%= @ldap_server %>"
AUTH_LDAP_SEARCH = "<%= @ldap_base_dn %>"
AUTH_LDAP_BIND_USER = "<%= @ldap_bind_user %>"
AUTH_LDAP_BIND_PASSWORD = "<%= @ldap_bind_pass %>"
AUTH_LDAP_USE_TLS = False
AUTH_LDAP_ALLOW_SELF_SIGNED = False

<% if @ldap_filter_login -%>
AUTH_LDAP_SEARCH_FILTER = "<%= @ldap_filter_string %>"
<% end -%>

AUTH_ROLES_SYNC_AT_LOGIN = True
AUTH_ROLES_MAPPING = {
<% @ldap_roles_mapping.each do | group, roles | -%>
    "cn=<%= group %>,<%= @ldap_group_dn %>": [
<% roles.each do |role| -%>
        '<%= role %>',
<% end -%>
    ],
<% end -%>
}
<% else -%>
AUTH_TYPE = AUTH_DB
<% end -%>


class CustomLoggingConfigurator(DefaultLoggingConfigurator):
    def configure_logging(self, app_config, debug_mode):
        super().configure_logging(app_config, debug_mode)
        superset_logger = logging.getLogger("superset")
        superset_logger.addHandler(JournaldLogHandler())

LOGGING_CONFIGURATOR = CustomLoggingConfigurator()


def init_celery_logger(logger=None,loglevel=logging.DEBUG, **kwargs):
    if not logger:
        logger = logging.getLogger("superset")
    logger.addHandler(JournaldLogHandler())
    logger.setLevel(loglevel)
    return logger


after_setup_task_logger.connect(init_celery_logger)
after_setup_logger.connect(init_celery_logger)

